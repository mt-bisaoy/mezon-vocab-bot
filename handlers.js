 const userService = require('./services/userService');
const vocabService = require('./services/vocabService');

// Bi·∫øn t·∫°m ƒë·ªÉ l∆∞u tr·∫°ng th√°i review c·ªßa user
const activeReviews = new Map();

const handleAddCommand = async (client, event, content) => {
  const channel = await client.channels.fetch(event.channel_id);
  const parts = content.split(' - ').map(p => p.trim());
  if (parts.length < 2) {
    return channel.send({ t: "C√∫ ph√°p sai. D√πng: `/add T·ª´ - Nghƒ©a - [V√≠ d·ª•]`" });
  }

  const [word, meaning, example = ''] = parts;
  const mezonUser = await client.users.fetch(event.sender_id);
  const user = await userService.findOrCreateUser(event.sender_id, mezonUser.username);

  try {
    await vocabService.addWord(user.id, word, meaning, example);
    await channel.send({ t: `‚úÖ ƒê√£ th√™m t·ª´ m·ªõi: **${word}**` });
  } catch (err) {
    console.error('Error in /add command:', err);
    await channel.send({ t: "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra." });
  }
};

const handleListCommand = async (client, event) => {
    const channel = await client.channels.fetch(event.channel_id);
    const mezonUser = await client.users.fetch(event.sender_id);
    const user = await userService.findOrCreateUser(event.sender_id, mezonUser.username);
    try {
        const words = await vocabService.listWords(user.id);
        if (words.length === 0) {
            return channel.send({ t: "B·∫°n ch∆∞a c√≥ t·ª´ n√†o." });
        }
        const wordList = words.map((w, i) => `${i + 1}. **${w.word}**: ${w.meaning}`).join('\n');
        await channel.send({ t: `üìö **T·ª´ v·ª±ng c·ªßa b·∫°n:**\n${wordList}` });
    } catch (err) {
        console.error('Error in /list command:', err);
        await channel.send({ t: "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra." });
    }
};

const handleReviewCommand = async (client, event) => {
    const channel = await client.channels.fetch(event.channel_id);
    const mezonUser = await client.users.fetch(event.sender_id);
    const user = await userService.findOrCreateUser(event.sender_id, mezonUser.username);

    try {
        const wordToReview = await vocabService.getReviewWord(user.id);
        if (!wordToReview) {
            return channel.send({ t: "üéâ Tuy·ªát v·ªùi! B·∫°n ƒë√£ √¥n h·∫øt c√°c t·ª´ c·∫ßn √¥n. H√£y h·ªçc t·ª´ m·ªõi ho·∫∑c ch·ªù nh√©!" });
        }

        // L∆∞u l·∫°i t·ª´ ƒëang review cho user n√†y
        activeReviews.set(user.mezon_id, wordToReview);

        const reviewMessage = `ü§î **√în t·∫≠p n√†o!**\n\nT·ª´ v·ª±ng: **${wordToReview.word}**\n\nNghƒ©a l√† g√¨ nh·ªâ?\n\n*G·ª≠i \`/dapan\` ƒë·ªÉ xem v√† ch·∫•m ƒëi·ªÉm.*`;
        await channel.send({ t: reviewMessage });

    } catch (err) {
        console.error('Error in /review command:', err);
        await channel.send({ t: "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra." });
    }
};

const handleAnswerCommand = async (client, event) => {
    const channel = await client.channels.fetch(event.channel_id);
    const mezonId = event.sender_id;
    const wordToReview = activeReviews.get(mezonId);

    if (!wordToReview) {
        return channel.send({ t: "B·∫°n kh√¥ng c√≥ t·ª´ n√†o ƒëang ch·ªù √¥n t·∫≠p. D√πng `/review` ƒë·ªÉ b·∫Øt ƒë·∫ßu." });
    }
    
    // X√≥a t·ª´ kh·ªèi danh s√°ch ch·ªù ƒë·ªÉ tr√°nh tr·∫£ l·ªùi nhi·ªÅu l·∫ßn
    activeReviews.delete(mezonId);

    const mezonUser = await client.users.fetch(event.sender_id);
    const user = await userService.findOrCreateUser(event.sender_id, mezonUser.username);
    
    const explanation = `**${wordToReview.word}**: ${wordToReview.meaning}\n*V√≠ d·ª•: ${wordToReview.example || 'Kh√¥ng c√≥'}*`;

    // ƒê√¢y l√† ph·∫ßn b·∫°n s·∫Ω h·ªèi ng∆∞·ªùi d√πng l√† "b·∫°n tr·∫£ l·ªùi ƒë√∫ng hay sai?"
    // V√¨ Mezon ch∆∞a c√≥ button, ta s·∫Ω m·∫∑c ƒë·ªãnh l√† h·ªç t·ª± ƒë√°nh gi√°
    await channel.send({ t: `**ƒê√°p √°n:**\n${explanation}\n\nB·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng ch·ª©? G·ª≠i \`/dung\` ho·∫∑c \`/sai\` ƒë·ªÉ ghi nh·∫≠n ti·∫øn ƒë·ªô.` });
    
    // L∆∞u l·∫°i t·ª´ ƒë·ªÉ ch·ªù ch·∫•m ƒëi·ªÉm
    activeReviews.set(mezonId, { ...wordToReview, waitingForScore: true });
};

const handleScoreCommand = async (client, event, isCorrect) => {
    const channel = await client.channels.fetch(event.channel_id);
    const mezonId = event.sender_id;
    const wordInfo = activeReviews.get(mezonId);

    if (!wordInfo || !wordInfo.waitingForScore) {
        return channel.send({ t: "Kh√¥ng c√≥ ƒë√°p √°n n√†o ƒëang ch·ªù b·∫°n ch·∫•m ƒëi·ªÉm." });
    }

    activeReviews.delete(mezonId);

    const mezonUser = await client.users.fetch(event.sender_id);
    const user = await userService.findOrCreateUser(event.sender_id, mezonUser.username);

    try {
        await vocabService.updateReviewProgress(user.id, wordInfo.id, isCorrect);
        const feedback = isCorrect 
            ? "‚úÖ Tuy·ªát v·ªùi! ƒê√£ ghi nh·∫≠n b·∫°n tr·∫£ l·ªùi ƒë√∫ng." 
            : "‚ùå Kh√¥ng sao c·∫£! L·∫ßn sau s·∫Ω nh·ªõ nh√©. ƒê√£ ghi nh·∫≠n b·∫°n tr·∫£ l·ªùi sai.";
        await channel.send({ t: feedback });
    } catch (err) {
        console.error('Error updating score:', err);
        await channel.send({ t: "‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô." });
    }
};


module.exports = {
  handleAddCommand,
  handleListCommand,
  handleReviewCommand,
  handleAnswerCommand,
  handleScoreCommand,
};
   

